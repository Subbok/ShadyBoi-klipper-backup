[gcode_macro Settings]
description: This macro contains all adjustable settings
# Enables or disables verbose output for debugging. When set to True, more detailed information will be printed.
variable_verbose_enable: False
# Defines the Z position where the purge will occur. The default is 0.8mm.
variable_purge_height: 0.8
# Sets the distance between the filament tip and the nozzle before purging. Leave at 0 if not used.
variable_tip_distance: 0
# Specifies the distance the purge will be positioned in front of the print area. Default is 10mm.
variable_purge_margin: 10
# Determines the amount of filament to purge before starting the print. The default amount is 30mm.
variable_purge_amount: 30
# Sets the flow rate for purging in mm³/s. The default flow rate is 20 mm³/s.
variable_flow_rate: 20
# Defines the Z height where the printhead will park for pre-print heating. Default is 10mm.
variable_smart_park_height: 10
# Gcode section left intentionally blank. Do not disturb.
gcode: 
    {action_respond_info("Leave me alone")}

[gcode_macro Z_OFFSET]
gcode:
  PROBE_CALIBRATE
  
[gcode_macro EDDY_Z_OFFSET]
gcode:
  PROBE_EDDY_CURRENT_CALIBRATE_AUTO CHIP=btt_eddy
  
[gcode_macro PID_Bed]
gcode:
  {% set temp = params.TEMP|default(60) %}
  PID_CALIBRATE HEATER=heater_bed TARGET={temp}

[gcode_macro PID_Hotend]
gcode:
  {% set temp = params.TEMP|default(235) %}
  PID_CALIBRATE HEATER=extruder TARGET={temp}

[gcode_shell_command input_result_x]
command: sh /home/biqu/klipper/sh/inputer_x.sh
timeout: 120.
verbose: True

[gcode_shell_command input_result_y]
command: sh /home/biqu/klipper/sh/inputer_y.sh
timeout: 120.
verbose: True

[gcode_macro Inputer_X] 
gcode:
      TEST_RESONANCES AXIS=X
      RUN_SHELL_COMMAND CMD=input_result_x
      
[gcode_macro Inputer_Y] 
gcode:
      TEST_RESONANCES AXIS=Y
      RUN_SHELL_COMMAND CMD=input_result_y

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.
gcode:

    {% set settings = printer["gcode_macro Settings"] %}
    {% set z_height = settings.smart_park_height | float %}
    {% set purge_margin = settings.purge_margin | float %}
    {% set verbose_enable = settings.verbose_enable | abs %}
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    {% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
        {% set x_min = [ x_min - purge_margin , x_min ] | min %}
        {% set y_min = [ y_min - purge_margin , y_min ] | min %}
        {% set x_min = [ x_min , axis_minimum_x ] | max %}
        {% set y_min = [ y_min , axis_minimum_y ] | max %}
    {% endif %}

    {% if verbose_enable == True %}
    { action_respond_info("Smart Park location: {},{}.".format(
        (x_min),
        (y_min),
    )) }
    {% endif %}

    SAVE_GCODE_STATE NAME=Presmartpark_State

    G90
    {% if printer.toolhead.position.z < z_height %}
        G0 Z{z_height}
    {% endif %}
    G0 X{x_min} Y{y_min} F{travel_speed}
    G0 Z{z_height}

    RESTORE_GCODE_STATE NAME=Presmartpark_State

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    {% set verbose_enable = printer["gcode_macro Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro Settings"].flow_rate | float %}

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}

    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}
        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
    {% else %}
        {% if verbose_enable == True %}
        {action_respond_info("Moving filament tip {}mms".format(
            (tip_distance),
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("Purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("Purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        {% if purge_y_origin > 0 %}
            {action_respond_info("Purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }

            SAVE_GCODE_STATE NAME=Prepurge_State

            G92 E0
            G0 F{travel_speed}
            G90
            G0 X{purge_x_center} Y{purge_y_origin}
            G0 Z{purge_height}
            M83
            G1 E{tip_distance} F{purge_move_speed}
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
            {RETRACT}
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
            G92 E0
            M82
            G0 Z{purge_height * 2} F{travel_speed}

        {% else %}
            {action_respond_info("Purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }

            SAVE_GCODE_STATE NAME=Prepurge_State

            G92 E0
            G0 F{travel_speed}
            G90
            G0 X{purge_x_origin} Y{purge_y_center}
            G0 Z{purge_height}
            M83
            G1 E{tip_distance} F{purge_move_speed}
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
            {RETRACT}
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
            G92 E0
            M82
            G0 Z{purge_height * 2} F{travel_speed}

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State
    {% endif %}

[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.settings %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% elif config["beacon"] %}
        # probe section found
        {% set probe = config["beacon"] %}
        {% set has_probe = True %}
    {% elif config["smart_effector"] %}
        # smart_effector probe section found
        {% set probe = config["smart_effector"] %}
        {% set has_probe = True %}
    {% elif config["probe_eddy_current btt_eddy"] %}
        # probe_eddy_current btt_eddy probe section found
        {% set probe = config["probe_eddy_current btt_eddy"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        {% if probe.z_offset is defined %}
            RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        {% elif probe.trigger_distance is defined %}
            RESPOND MSG="Configured Probe Trigger Distance {probe.trigger_distance}"
        {% endif %}
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}
